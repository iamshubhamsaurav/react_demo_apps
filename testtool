import React, { useEffect, useState } from "react";
import axios from "axios";
import { Box, Heading, Spinner, Text, VStack, Select, HStack } from "@chakra-ui/react";
import Chart from "react-apexcharts";

const UserUtilizationCharts = () => {
  const [cpuData, setCpuData] = useState({});
  const [memoryData, setMemoryData] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);
  const [timeframe, setTimeframe] = useState("latest");

  // NEW: Helper function to get the full API endpoint based on the selected time frame
  const getUsersApiEndpoint = (frame) => {
    switch (frame) {
      case "day":
        return "/users/usage/day";
      case "week":
        return "/users/usage/week";
      case "latest":
      default:
        return "/users/usage/latest"; // Using /latest as the default base endpoint
    }
  };

  // Fetch CPU and Memory data from a single API call
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true); // Set loading to true on every fetch
      setError(false);
      try {
        // UPDATED: Use the new single endpoint
        const endpoint = getUsersApiEndpoint(timeframe);
        const response = await axios.get(endpoint);
        
        // UPDATED: Extract data from the single response object using the new keys
        setCpuData(response.data.cpu_usage || {});
        setMemoryData(response.data.memory_usage || {});
        setLoading(false);
      } catch (err) {
        console.error("Error fetching data:", err);
        setError(true);
        setLoading(false);
      }
    };

    fetchData();
    // Re-run effect whenever timeframe changes
  }, [timeframe]);

  const handleTimeframeChange = (e) => {
    setTimeframe(e.target.value);
  };

  if (loading) {
    return (
      <Box display="flex" alignItems="center" justifyContent="center" minH="60vh">
        <Spinner size="xl" color="blue.500" />
      </Box>
    );
  }

  if (error) {
    return (
      <Box textAlign="center" mt={10}>
        <Text color="red.500" fontSize="lg">
          Failed to load data from API.
        </Text>
      </Box>
    );
  }

  // Convert objects to sorted arrays
  const sortAndTakeTop50Percent = (obj) => {
    const entries = Object.entries(obj).sort((a, b) => b[1] - a[1]);
    const half = Math.ceil(entries.length / 2);
    return entries.slice(0, half);
  };

  const topCpu = sortAndTakeTop50Percent(cpuData);
  const topMemory = sortAndTakeTop50Percent(memoryData);

  const cpuCategories = topCpu.map(([user]) => user);
  const cpuValues = topCpu.map(([, value]) => value);

  const memCategories = topMemory.map(([user]) => user);
  const memValues = topMemory.map(([, value]) => value);

  const baseOptions = {
    chart: { type: "bar", toolbar: { show: false } },
    plotOptions: { bar: { borderRadius: 4, horizontal: false, columnWidth: "55%" } },
    dataLabels: { enabled: false },
    grid: { borderColor: "#2D3748" },
    tooltip: { theme: "dark" },
    yaxis: {
      title: { text: "Utilization (%)", style: { color: "#E2E8F0" } },
      labels: { style: { colors: "#E2E8F0" } },
    },
  };

  return (
    // Added pt={10} for consistent top spacing, similar to ToolUsageCharts
    <VStack spacing={8} align="stretch" p={6} pt={10}>
      <HStack justifyContent="space-between" alignItems="center">
        <Heading size="lg" textAlign="center">
          User Utilization Overview
        </Heading>
        <Select
          value={timeframe}
          onChange={handleTimeframeChange}
          width="200px"
          bg="gray.700"
          color="white"
        >
          <option value="latest">Latest Data</option>
          <option value="day">Last Day Average</option>
          <option value="week">Last Week Average</option>
        </Select>
      </HStack>

      {/* CPU Utilization Chart */}
      <Box bg="gray.800" p={5} borderRadius="xl" boxShadow="lg">
        <Heading size="md" color="white" mb={3}>
          Top 50% CPU Utilization Users
        </Heading>
        <Chart
          options={{
            ...baseOptions,
            colors: ["#3182CE"],
            xaxis: {
              categories: cpuCategories,
              labels: { style: { colors: "#E2E8F0", fontSize: "11px" } },
              title: { text: "Users", style: { color: "#E2E8F0" } },
            },
          }}
          series={[{ name: "CPU Util (%)", data: cpuValues }]}
          type="bar"
          height={350}
        />
      </Box>

      {/* Memory Utilization Chart */}
      <Box bg="gray.800" p={5} borderRadius="xl" boxShadow="lg">
        <Heading size="md" color="white" mb={3}>
          Top 50% Memory Utilization Users
        </Heading>
        <Chart
          options={{
            ...baseOptions,
            colors: ["#38A169"],
            xaxis: {
              categories: memCategories,
              labels: { style: { colors: "#E2E8F0", fontSize: "11px" } },
              title: { text: "Users", style: { color: "#E2E8F0" } },
            },
          }}
          series={[{ name: "Memory Util (%)", data: memValues }]}
          type="bar"
          height={350}
        />
      </Box>
    </VStack>
  );
};

export default UserUtilizationCharts;
